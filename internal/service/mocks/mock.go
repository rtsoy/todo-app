// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt"
	uuid "github.com/google/uuid"
	model "github.com/rtsoy/todo-app/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoItemServicer is a mock of TodoItemServicer interface.
type MockTodoItemServicer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoItemServicerMockRecorder
}

// MockTodoItemServicerMockRecorder is the mock recorder for MockTodoItemServicer.
type MockTodoItemServicerMockRecorder struct {
	mock *MockTodoItemServicer
}

// NewMockTodoItemServicer creates a new mock instance.
func NewMockTodoItemServicer(ctrl *gomock.Controller) *MockTodoItemServicer {
	mock := &MockTodoItemServicer{ctrl: ctrl}
	mock.recorder = &MockTodoItemServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoItemServicer) EXPECT() *MockTodoItemServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoItemServicer) Create(userID, listID uuid.UUID, item model.CreateTodoItemDTO) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, listID, item)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoItemServicerMockRecorder) Create(userID, listID, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoItemServicer)(nil).Create), userID, listID, item)
}

// Delete mocks base method.
func (m *MockTodoItemServicer) Delete(userID, itemID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoItemServicerMockRecorder) Delete(userID, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoItemServicer)(nil).Delete), userID, itemID)
}

// GetAll mocks base method.
func (m *MockTodoItemServicer) GetAll(userID, listID uuid.UUID, pagination *model.Pagination, orderBy *string) ([]model.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID, listID, pagination, orderBy)
	ret0, _ := ret[0].([]model.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoItemServicerMockRecorder) GetAll(userID, listID, pagination, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoItemServicer)(nil).GetAll), userID, listID, pagination, orderBy)
}

// GetByID mocks base method.
func (m *MockTodoItemServicer) GetByID(userID, itemID uuid.UUID) (model.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID, itemID)
	ret0, _ := ret[0].(model.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTodoItemServicerMockRecorder) GetByID(userID, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTodoItemServicer)(nil).GetByID), userID, itemID)
}

// Update mocks base method.
func (m *MockTodoItemServicer) Update(userID, itemID uuid.UUID, data model.UpdateTodoItemDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, itemID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoItemServicerMockRecorder) Update(userID, itemID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoItemServicer)(nil).Update), userID, itemID, data)
}

// MockTodoListServicer is a mock of TodoListServicer interface.
type MockTodoListServicer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoListServicerMockRecorder
}

// MockTodoListServicerMockRecorder is the mock recorder for MockTodoListServicer.
type MockTodoListServicerMockRecorder struct {
	mock *MockTodoListServicer
}

// NewMockTodoListServicer creates a new mock instance.
func NewMockTodoListServicer(ctrl *gomock.Controller) *MockTodoListServicer {
	mock := &MockTodoListServicer{ctrl: ctrl}
	mock.recorder = &MockTodoListServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoListServicer) EXPECT() *MockTodoListServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoListServicer) Create(userID uuid.UUID, list model.CreateTodoListDTO) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, list)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoListServicerMockRecorder) Create(userID, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoListServicer)(nil).Create), userID, list)
}

// Delete mocks base method.
func (m *MockTodoListServicer) Delete(userID, listID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, listID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoListServicerMockRecorder) Delete(userID, listID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoListServicer)(nil).Delete), userID, listID)
}

// GetAll mocks base method.
func (m *MockTodoListServicer) GetAll(userID uuid.UUID, orderBy *string) ([]model.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID, orderBy)
	ret0, _ := ret[0].([]model.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoListServicerMockRecorder) GetAll(userID, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoListServicer)(nil).GetAll), userID, orderBy)
}

// GetByID mocks base method.
func (m *MockTodoListServicer) GetByID(userID, listID uuid.UUID) (model.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID, listID)
	ret0, _ := ret[0].(model.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTodoListServicerMockRecorder) GetByID(userID, listID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTodoListServicer)(nil).GetByID), userID, listID)
}

// Update mocks base method.
func (m *MockTodoListServicer) Update(userID, listID uuid.UUID, data model.UpdateTodoListDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, listID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoListServicerMockRecorder) Update(userID, listID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoListServicer)(nil).Update), userID, listID, data)
}

// MockUserServicer is a mock of UserServicer interface.
type MockUserServicer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicerMockRecorder
}

// MockUserServicerMockRecorder is the mock recorder for MockUserServicer.
type MockUserServicerMockRecorder struct {
	mock *MockUserServicer
}

// NewMockUserServicer creates a new mock instance.
func NewMockUserServicer(ctrl *gomock.Controller) *MockUserServicer {
	mock := &MockUserServicer{ctrl: ctrl}
	mock.recorder = &MockUserServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServicer) EXPECT() *MockUserServicerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServicer) CreateUser(user model.CreateUserDTO) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServicerMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServicer)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockUserServicer) GenerateToken(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockUserServicerMockRecorder) GenerateToken(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockUserServicer)(nil).GenerateToken), email, password)
}

// ParseToken mocks base method.
func (m *MockUserServicer) ParseToken(accessToken string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUserServicerMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUserServicer)(nil).ParseToken), accessToken)
}
